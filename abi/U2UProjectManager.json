{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "projectId",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "bool",
								"name": "isERC721",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "isRaribleCollection",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "isPreminted",
								"type": "bool"
							},
							{
								"internalType": "address",
								"name": "collectionAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							}
						],
						"indexed": false,
						"internalType": "struct LibStructs.Collection",
						"name": "collection",
						"type": "tuple"
					}
				],
				"name": "CreateProject",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "enum LibStructs.RoundType",
								"name": "roundType",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "price",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "start",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "end",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "startClaim",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxAmountNFT",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "soldAmountNFT",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxAmountNFTPerWallet",
								"type": "uint256"
							}
						],
						"internalType": "struct LibStructs.Round[]",
						"name": "rounds",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "bool",
								"name": "isERC721",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "isRaribleCollection",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "isPreminted",
								"type": "bool"
							},
							{
								"internalType": "address",
								"name": "collectionAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							}
						],
						"internalType": "struct LibStructs.Collection",
						"name": "collection",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "projectOwner",
						"type": "address"
					}
				],
				"name": "createProject",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "deployers",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "projectId",
						"type": "uint256"
					}
				],
				"name": "getProject",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "projectOwner",
								"type": "address"
							},
							{
								"internalType": "address[]",
								"name": "roundAddresses",
								"type": "address[]"
							},
							{
								"components": [
									{
										"internalType": "bool",
										"name": "isERC721",
										"type": "bool"
									},
									{
										"internalType": "bool",
										"name": "isRaribleCollection",
										"type": "bool"
									},
									{
										"internalType": "bool",
										"name": "isPreminted",
										"type": "bool"
									},
									{
										"internalType": "address",
										"name": "collectionAddress",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "owner",
										"type": "address"
									}
								],
								"internalType": "struct LibStructs.Collection",
								"name": "collection",
								"type": "tuple"
							}
						],
						"internalType": "struct LibStructs.Project",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getProjectCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "projectId",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "bool",
								"name": "isERC721",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "isRaribleCollection",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "isPreminted",
								"type": "bool"
							},
							{
								"internalType": "address",
								"name": "collectionAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							}
						],
						"internalType": "struct LibStructs.Collection",
						"name": "newCollection",
						"type": "tuple"
					}
				],
				"name": "setCollection",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "projectId",
						"type": "uint256"
					},
					{
						"internalType": "address[]",
						"name": "roundAddresses",
						"type": "address[]"
					}
				],
				"name": "setRoundContracts",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"U2UProjectManager.sol": "U2UProjectManager"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts@3.4/access/Ownable.sol": {
			"keccak256": "0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d",
			"license": "MIT",
			"urls": [
				"bzz-raw://90faf5851c02f9bd42c5bfb54d4f0421a2612f50ab80b2c4fa24fa3792071cc2",
				"dweb:/ipfs/QmRGM4F2PcGVF85aTfaA9YBhCHHDqrMhRjyp6fGeBTtirb"
			]
		},
		"@openzeppelin/contracts@3.4/math/SafeMath.sol": {
			"keccak256": "0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52",
			"license": "MIT",
			"urls": [
				"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c",
				"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR"
			]
		},
		"@openzeppelin/contracts@3.4/utils/Context.sol": {
			"keccak256": "0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0",
			"license": "MIT",
			"urls": [
				"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f",
				"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96"
			]
		},
		"@openzeppelin/contracts@3.4/utils/Counters.sol": {
			"keccak256": "0x21662e4254ce4ac8570b30cc7ab31435966b3cb778a56ba4d09276881cfb2437",
			"license": "MIT",
			"urls": [
				"bzz-raw://acce8fe6adc670f9987a8b6aedc4cc0abcd0dcd2e152d649a12099d735bd7bad",
				"dweb:/ipfs/QmXAk17oK3daBmA8CGyVcU56L496jW3U6Ef1WkfHyB1JAV"
			]
		},
		"U2UProjectManager.sol": {
			"keccak256": "0x33b809748d58920196cfa82b0ea841f221050e71bb087fad9e7d00bd04b4e0cb",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6c639fb94d928ec6e2458114a83e0e0c677cd60b09b4ed38b73e07d9c5b543b",
				"dweb:/ipfs/QmNpP7oe2ovy7BFGGSZ8FmCmUmGHejZmToR7Ydi531oUSe"
			]
		},
		"interfaces/IDeployer.sol": {
			"keccak256": "0x8352b193bca819d9c22dc840be7cfd7268244d2a967d64f3d244a704c0884bce",
			"license": "MIT",
			"urls": [
				"bzz-raw://be68b126aa1871b1fefdef5142936af5f27163cae78019fd2b246fcdc9e76688",
				"dweb:/ipfs/QmetewVrNtfzTwQwjX7CL6U1tMr4XrUCYaqYKcY6aa9cHD"
			]
		},
		"interfaces/IRound.sol": {
			"keccak256": "0xefac98e9ec514888ce95a9a00510d431e9313c3c42f21d03578261a66f51945b",
			"license": "MIT",
			"urls": [
				"bzz-raw://e9f3c3319cd29a5c6366ae718d8ac536e9304233edcdcbeb73fa109c4dbd184a",
				"dweb:/ipfs/QmcD6Ka1b4brhv4VPFnL1a4GbhhJAhqtDX8c1VyE1KmZSv"
			]
		},
		"libraries/LibStructs.sol": {
			"keccak256": "0x42ea7d56e3b5afd807ae45c1aefe6eb139a4881a7df9a7bd41dee503dda47efc",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc1bf97b56a6d9bf06ffa0d34276ee27e67657e524b4065c05d7424dc50472ea",
				"dweb:/ipfs/QmVDLTq5YDgFZuCSH2zxdeRndWKA5sVZFZwgHXHEBtorpd"
			]
		}
	},
	"version": 1
}